package Project;

public class BinarySearchTree {

    private Node root;



    public BinarySearchTree() {

        root = null;

    }



    public void insert(int key) {

        root = insertRec(root, key);

    }



    private Node insertRec(Node root, int key) {

        if (root == null) {

            root = new Node(key);

            return root;

        }



        if (key < root.key) {

            root.left = insertRec(root.left, key);

        } else if (key > root.key) {

            root.right = insertRec(root.right, key);

        }



        return root;

    }



    public boolean search(int key) {

        return searchRec(root, key);

    }



    private boolean searchRec(Node root, int key) {

        if (root == null) {

            return false;

        }



        if (root.key == key) {

            return true;

        }



        if (root.key > key) {

            return searchRec(root.left, key);

        }



        return searchRec(root.right, key);

    }



    public void delete(int key) {

        root = deleteRec(root, key);

    }



    private Node deleteRec(Node root, int key) {

        if (root == null) {

            return root;

        }



        if (key < root.key) {

            root.left = deleteRec(root.left, key);

        } else if (key > root.key) {

            root.right = deleteRec(root.right, key);

        } else {

            if (root.left == null) {

                return root.right;

            } else if (root.right == null) {

                return root.left;

            }



            root.key = minValue(root.right);

            root.right = deleteRec(root.right, root.key);

        }



        return root;

    }



    private int minValue(Node root) {

        int minv = root.key;

        while (root.left != null) {

            minv = root.left.key;

            root = root.left;

        }

        return minv;

    }



    public void inorder() {

        inorderRec(root);

        System.out.println();

    }



    private void inorderRec(Node root) {

        if (root != null) {

            inorderRec(root.left);

            System.out.print(root.key + " ");

            inorderRec(root.right);

        }

    }



    private class Node {

        int key;

        Node left, right;



        public Node(int item) {

            key = item;

            left = right = null;

        }

    }



    public static void main(String[] args) {

        BinarySearchTree bst = new BinarySearchTree();

        bst.insert(50);

        bst.insert(30);

        bst.insert(20);

        bst.insert(40);

        bst.insert(70);

        bst.insert(60);

        bst.insert(80);



        System.out.println("Inorder traversal of the BST:");

        bst.inorder();



        System.out.println("Searching for 40:");

        boolean found = bst.search(40);

        if (found) {

            System.out.println("Found!");

        } else {

            System.out.println("Not found!");

        }



        System.out.println("Deleting 20:");

        bst.delete(20);



        System.out.println("Inorder traversal of the BST after deletion:");

        bst.inorder();

    }

}
